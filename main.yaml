AWSTemplateFormatVersion: 2010-09-09

Parameters:
  EC2InstanceType:
    Type: String
  EC2AMI:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "Internal Security group for ${AWS::StackName}"

      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service:
              - "ec2.amazonaws.com"
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - Ref: InstanceRole

  Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              wget: []
              unzip: []
    Properties:
      ImageId: !Ref EC2AMI
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      Monitoring: true
      SecurityGroupIds:
        - !GetAtt SecurityGroup.GroupId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # send script output to /tmp so we can debug boot failures
          exec > /tmp/userdata.log 2>&1

          # Update all packages
          yum -y update

          # Get latest cfn scripts; https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/best-practices.html#cfninit
          yum install -y aws-cfn-bootstrap

          cat > /tmp/install_script.sh << EOF
            # START
            echo "Setting up Python Environment"
            yum install python37
            # Dot source the files to ensure that variables are available within the current shell
            . /home/ec2-user/.bashrc

            # Install Flask
            pip3 install flask
            

            # Download latest code, unzip it into /home/ec2-user/app
            wget https://github.com/emmandecena/aws-flask/archive/refs/heads/main.zip
            unzip main.zip
            mv aws-flask app


            # Create log directory
            mkdir -p /home/ec2-user/app/logs


            # Run server

            cd app
            FLASK_APP=hello.py FLASK_DEBUG=true flask run --host=0.0.0.0
            EOF

          chown ec2-user:ec2-user /tmp/install_script.sh && chmod a+x /tmp/install_script.sh

          sleep 1; su - ec2-user -c "/tmp/install_script.sh"

          # Have CloudFormation install any files and packages from the metadata
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --region ${AWS::Region} --resource InstanceLaunchTemplate

          # Query the EC2 metadata service for this instance's instance-id

          export INSTANCE_ID=`curl -s http://169.254.169.254/latest/meta- data/instance-id`❶

          # Query EC2 describeTags method and pull our the CFN Logical ID for this instance


          export LOGICAL_ID=`aws --region ${AWS::Region} ec2 describe-tags \ 
            --filters "Name=resource-id,Values=${!INSTANCE_ID}" \
                      "Name=key,Values=aws:cloudformation:logical-id" \
            | jq -r ".Tags[0].Value"`

          # Signal to CloudFormation that the instance is ready
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --region ${AWS::Region} --resource ${!LOGICAL_ID}

      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

Outputs:
  InstanceEndpoint:
    Description: The DNS name for the created instance
    Value: !Sub "http://${Instance.PublicDnsName}:5000"
    Export:
      Name: InstanceEndpoint
